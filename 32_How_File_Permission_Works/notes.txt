Managing file permissions is an important task in maintaining the security and integrity of a system. It controls who can read, write, or execute a file, and it can be crucial for both system administration and collaborative environments. 



* Permissions are divided into three categories:

1. Owner: The user who owns the file or directory.
2. Group: The group associated with the file or directory.
3. Others: All other users on the system.



* Each of these categories has three types of File Permissions:-

In Unix-like operating systems, there are three types of file permissions:

1. Read (r) – Allows the user to open and view the contents of a file. 

2. Write (w) – Allows the user to modify the contents of a file or directory (i.
e., add, remove, or rename files in a directory).

3. Execute (x) – Allows the user to run a file as a program/script. For directories, it allows the user to access files in the directory.




NOTE:These permissions apply to three categories of users:

a. Owner (User): The user who owns the file.
b.Group: Users who are part of the file’s group.
c.Others: All other users on the system.




* Viewing File Permissions: 

To view the current file permissions, use the ls -l command:

    Ex:- $ ls -l myfile.txt
    We get output:
        -rwxr-xr-x 1 user group 1234 Dec 4 14:32 myfile.txt

The output shows:

The first character (-) indicates it's a regular file (it would be d for a directory).
The next three characters (rwx) show the permissions for the owner (read, write, and execute).
The next three characters (r-x) show the permissions for the group (read and execute).
The last three characters (r-x) show the permissions for others (read and execute).        




* Modifying File Permissions:

Permissions can be modified using the chmod command. There are two ways to set permissions: symbolic (using letters) and numeric (using numbers).

1. Symbolic Method:

a. r = read
b. w = write
c. x = execute
d. + = add a permission
e. - = remove a permission
f. = = set a specific permission

Examples:

A. Grant execute permission to the owner:
    chmod u+x myfile.txt

B. Remove write permission for the group:
    chmod g-w myfile.txt

C. Grant read and execute permission to others:
    chmod o+rx myfile.txt

D. Set permissions explicitly (e.g., owner can read/write, group can read, others have no permissions):
    chmod u=rw,g=r,o= myfile.txt



2. Numeric Method:

Permissions can also be set using numbers, where:

a. r = 4
b. w = 2
c. x = 1
d. - = 0

To set permissions using the numeric method:

Example: Give the owner full permissions, the group read/write permissions, and others read-only permissions:
    chmod 764 myfile.txt

In this case:
7 (owner) = read + write + execute (4 + 2 + 1)
6 (group) = read + write (4 + 2)
4 (others) = read (4)





* Modifying Ownership and Group:


To change the file’s owner or group, use the "chown" command:

1. Change the owner:
    chown newowner myfile.txt

2. Change both owner and group:
    chown newowner:newgroup myfile.txt

3. Change the group only:
    chgrp newgroup myfile.txt







* Directory Permissions:
For directories, the execute permission (x) is required to access or list the contents of a directory. Here are some common commands:

1. List files in a directory (requires read and execute permissions on the directory):
    ls /path/to/directory

2. Change into a directory (requires execute permission on the directory):
    cd /path/to/directory

3. Add a file to a directory (requires write permission on the directory):
    touch /path/to/directory/newfile.txt
